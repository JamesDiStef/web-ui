name: "Components: Bump version and release to npm"

# Run only when the workflow checking labels on Pull Requests is successful, and the Pull Request is targeting the main branch, is closed, and has changes in files or folders in the Components package.
on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - packages/components/**

jobs:
  bump_version:
    name: "Bump Version on Pull Request Merge"
    # This ensures the job only runs for Pull Requests that are merged.
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      token: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Check out the repository code.
      - uses: actions/checkout@v3
      # Set up a node environment in the container.
      - uses: actions/setup-node@v3
      # Build the project to ensure it's up to date. If this steps fails, the job fails.
      - name: Build
        run: |
          cd packages/components
          npm ci
          npm run build
      # You need to set the git config or you can't commit the changes later.
      # The name and email here is for the GitHub Actions user.
      - name: Set git config
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      # The following steps will determine, based on a label, what version to bump to.
      # The "%s" will output the version number in the commit message.
      - name: Major version bump
        if: contains(github.event.pull_request.labels.*.name, 'major')
        run: npm --tag-version-prefix="test-v" version major -m 'Release major version %s' && git push --tags origin main --force
      - name: Minor version bump
        if: contains(github.event.pull_request.labels.*.name, 'minor')
        run: npm --tag-version-prefix="test-v" version minor -m 'Release minor version %s' && git push --tags origin main --force
      - name: Patch version bump
        if: contains(github.event.pull_request.labels.*.name, 'patch')
        run: npm --tag-version-prefix="test-v" version patch -m 'Release patch version %s' && git push --tags origin main --force
      - name: Premajor version bump
        if: contains(github.event.pull_request.labels.*.name, 'premajor')
        run: npm --tag-version-prefix="test-v" version patch -m 'Release premajor version %s' && git push --tags origin main --force
      - name: Preminor version bump
        if: contains(github.event.pull_request.labels.*.name, 'preminor')
        run: npm --tag-version-prefix="test-v" version preminor -m 'Release preminor version %s' && git push --tags origin main --force
      - name: Prepatch version bump
        if: contains(github.event.pull_request.labels.*.name, 'prepatch')
        run: npm --tag-version-prefix="test-v" version prepatch -m 'Release preatch version %s' && git push --tags origin main --force
      - name: Prerelease version bump
        if: contains(github.event.pull_request.labels.*.name, 'prerelease')
        # The "preid" part will determine what to put in the "rc"-part of this example version: 1.2.3-rc.0.
        run: npm --tag-version-prefix="test-v" --preid=rc version prerelease -m 'Release prerelease version %s' && git push --tags origin main --force

  # This job will release the updated version to npm
  release_to_npm:
    name: "Release Components to npm"
    # This step makes this job dependent on the previous job being successful
    needs: bump_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
          # Despite the package name including this scope, it's also necessary to set here
          scope: "@mapsindoors"
      - run: npm ci
      - run: cd packages/components
      - run: npm run build
      - run: npm run docs.build
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}

  # This job will release the Component documentation
  build_deploy_components_docs:
    name: "Build & Deploy Components Docs"
    needs: release_to_npm
    runs-on: ubuntu-latest
    # Check out the repository code, but only the latest version.
    steps:
      - uses: actions/checkout@v3
        with:
          ref: refs/heads/main
          fetch-depth: 1
      # Set up a node environment in the container.
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: npm ci
      # It is absolutely essential to use "CI=" as the first part of the lerna command, or it won't build properly.
      - run: |
          CI= npx lerna run build
          cd packages/components
          npm run build
          npm run docs.build
      - name: "Authenticate on Google Cloud Storage"
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
      # This command uses gsutil CLI to sync the local folder with the one on the bucket.
      # "-m" ensures parallel upload of files, "-d" mirrors the folders, "-c" compares checksums to avoid unnecessary uploads, "-r" is for a recursive sync into all folders.
      - run: gsutil -m rsync -d -c -r packages/components/docs gs://mi-components-documentation
      # This is to control cache and set it as low as possible so new changes are instantly available.
      - run: gsutil -m setmeta -h "Cache-Control:public, max-age=0"
          gs://mi-components-documentation/**/*.html
      - run: gsutil -m setmeta -h "Cache-Control:public, max-age=0"
          gs://mi-components-documentation/**/*.js
      - run: gsutil -m setmeta -h "Cache-Control:public, max-age=0"
          gs://mi-components-documentation/**/*.css
